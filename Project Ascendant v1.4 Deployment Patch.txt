<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project: Ascendant - Live Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #111827;
        }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #1f2937; }
        ::-webkit-scrollbar-thumb { background: #4b5563; border-radius: 10px; }
        ::-webkit-scrollbar-thumb:hover { background: #6b7280; }
        .neon-glow-cyan { box-shadow: 0 0 5px rgba(6, 182, 212, 0.7), 0 0 10px rgba(6, 182, 212, 0.5), 0 0 15px rgba(6, 182, 212, 0.3); }
        .rank-tag { font-weight: 900; padding: 2px 8px; border-radius: 9999px; font-size: 0.75rem; text-transform: uppercase; letter-spacing: 0.05em; }
        .rank-s { background-color: #ef4444; color: white; }
        .rank-a { background-color: #f97316; color: white; }
        .rank-b { background-color: #eab308; color: white; }
        .rank-c { background-color: #22c55e; color: white; }
        .rank-d { background-color: #3b82f6; color: white; }
        .rank-e { background-color: #6b7280; color: white; }
        .modal-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.75); z-index: 40; }
        .modal { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 50; }
    </style>
</head>
<body class="text-gray-200">

    <!-- Password Protection Overlay -->
    <div id="password-overlay" class="fixed inset-0 bg-gray-900 flex items-center justify-center z-50">
        <div class="w-full max-w-sm p-8 bg-gray-800 rounded-lg shadow-2xl border border-gray-700">
            <h1 class="text-2xl font-bold text-white text-center mb-2">PROJECT: ASCENDANT</h1>
            <p class="text-cyan-400 text-center mb-6">Authentication Required</p>
            <div class="space-y-4">
                <div>
                    <label for="password-input" class="block text-sm font-medium text-gray-300 mb-1">Enter Passkey</label>
                    <input type="password" id="password-input" class="w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500" placeholder="Enter passkey...">
                </div>
                <button id="password-submit" class="w-full bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-2 px-4 rounded-md transition-colors">Authorize</button>
            </div>
            <p id="password-error" class="text-red-500 text-center text-sm mt-4 h-4"></p>
        </div>
    </div>

    <!-- Main Container (Initially Hidden) -->
    <div id="main-content" class="min-h-screen p-4 sm:p-6 lg:p-8 hidden opacity-0">
        <div class="max-w-7xl mx-auto">
            <!-- Header -->
            <header class="mb-8">
                <h1 class="text-2xl sm:text-3xl font-bold text-white tracking-wide">PROJECT: ASCENDANT</h1>
                <p class="text-cyan-400">Jackie-TheGem v1.058 - Live System Interface</p>
            </header>
            <!-- Main Dashboard Layout -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8">
                <!-- Left Column -->
                <aside class="lg:col-span-1 space-y-6 lg:space-y-8">
                    <div id="player-stats" class="bg-gray-800 p-6 rounded-lg shadow-lg">
                        <h2 class="text-xl font-bold text-white mb-4 border-b border-gray-700 pb-2">RYLEE - PLAYER STATS</h2>
                        <div class="space-y-4">
                            <div>
                                <div class="flex justify-between items-baseline mb-1">
                                    <span class="font-semibold text-cyan-400">LEVEL 1</span>
                                    <span class="text-sm font-mono text-gray-400"><span id="current-exp">250</span> / <span id="max-exp">1000</span> EXP</span>
                                </div>
                                <div class="w-full bg-gray-700 rounded-full h-4">
                                    <div id="exp-bar" class="bg-cyan-500 h-4 rounded-full transition-all duration-500 ease-in-out" style="width: 25%;"></div>
                                </div>
                                <p class="text-xs text-center text-gray-500 mt-1">The Grindstone Curve</p>
                            </div>
                            <div id="core-stats-container" class="space-y-3 pt-4"></div>
                        </div>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                        <h2 class="text-xl font-bold text-white mb-4 border-b border-gray-700 pb-2">CONFIDANTS</h2>
                        <div class="space-y-3">
                            <div class="flex items-center justify-between"><span class="font-semibold">Savannah - Bond Confidant</span><span class="text-sm text-cyan-400 font-mono">Rank 5</span></div>
                            <div class="flex items-center justify-between"><span class="font-semibold">Edgar - Training Confidant</span><span class="text-sm text-cyan-400 font-mono">Rank 6</span></div>
                            <div class="flex items-center justify-between"><span class="font-semibold">Kru Somchai - Mentor Confidant</span><span class="text-sm text-cyan-400 font-mono">Rank 4</span></div>
                        </div>
                    </div>
                </aside>
                <!-- Right Column -->
                <main class="lg:col-span-2">
                    <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                        <h2 class="text-xl sm:text-2xl font-bold text-white mb-4">GIG BOARD</h2>
                        <div id="gig-board-container" class="space-y-6"></div>
                    </div>
                </main>
            </div>
            <!-- System Log -->
            <footer class="mt-8 bg-gray-800 p-4 rounded-lg shadow-lg">
                <h3 class="text-lg font-semibold text-cyan-400 mb-2">SYSTEM LOG</h3>
                <div id="system-log" class="text-sm text-gray-400 font-mono h-24 overflow-y-auto space-y-1"></div>
            </footer>
        </div>
    </div>
    
    <!-- Stat Allocation Modal -->
    <div id="stat-modal" class="hidden">
        <div class="modal-backdrop"></div>
        <div class="modal bg-gray-800 border border-cyan-500 rounded-lg shadow-2xl w-11/12 md:w-1/2 lg:w-1/3 p-6">
            <h2 class="text-2xl font-bold text-white mb-4">PAYOUT AWARDED</h2>
            <p class="mb-4">Gig complete. You've earned <span id="sp-earned" class="font-bold text-cyan-400"></span> Stat Points (SP). Allocate them.</p>
            <div id="stat-allocation-inputs" class="space-y-4 mb-6"></div>
            <div class="flex justify-between items-center">
                <p>Points Remaining: <span id="sp-remaining" class="font-bold text-cyan-400"></span></p>
                <button id="confirm-allocation-btn" class="bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-2 px-4 rounded disabled:bg-gray-600 disabled:cursor-not-allowed">Lock In</button>
            </div>
        </div>
    </div>

    <script>
    // FIX: Wait for the entire HTML document to be loaded and parsed before running any script.
    document.addEventListener('DOMContentLoaded', (event) => {

        // --- PASSWORD PROTECTION ---
        const passwordOverlay = document.getElementById('password-overlay');
        const mainContent = document.getElementById('main-content');
        const passwordInput = document.getElementById('password-input');
        const passwordSubmit = document.getElementById('password-submit');
        const passwordError = document.getElementById('password-error');

        // IMPORTANT: Change this password to your own secret passkey.
        const correctPassword = "solo-leveling";

        function checkPassword() {
            const enteredPassword = passwordInput.value;
            if (enteredPassword === correctPassword) {
                passwordOverlay.classList.add('transition-opacity', 'duration-500', 'opacity-0');
                setTimeout(() => {
                    passwordOverlay.classList.add('hidden');
                    mainContent.classList.remove('hidden');
                    mainContent.classList.add('opacity-100'); // Class added for smooth transition
                    initializeDashboard();
                }, 500);
            } else {
                passwordError.textContent = "Access Denied. Invalid Passkey.";
                passwordInput.classList.add('border-red-500');
                setTimeout(() => {
                    passwordError.textContent = "";
                    passwordInput.classList.remove('border-red-500');
                }, 2000);
            }
        }
        
        passwordSubmit.addEventListener('click', checkPassword);
        passwordInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                checkPassword();
            }
        });

        // --- DATA & DOM ELEMENTS (GLOBAL WITHIN SCOPE) ---
        let playerData, gigData;
        const coreStatsContainer = document.getElementById('core-stats-container');
        const gigBoardContainer = document.getElementById('gig-board-container');
        const systemLog = document.getElementById('system-log');
        const currentExpEl = document.getElementById('current-exp');
        const expBar = document.getElementById('exp-bar');
        const statModal = document.getElementById('stat-modal');
        const statAllocationInputs = document.getElementById('stat-allocation-inputs');
        const spEarnedEl = document.getElementById('sp-earned');
        const spRemainingEl = document.getElementById('sp-remaining');
        const confirmAllocationBtn = document.getElementById('confirm-allocation-btn');
        let currentCompletingGig = null;

        // --- MAIN APPLICATION LOGIC ---
        function initializeDashboard() {
            playerData = {
                level: 1, exp: 250, expToNextLevel: 1000,
                stats: {
                    STR: { name: 'Strength', value: 5 },
                    END: { name: 'Endurance', value: 6 },
                    DIS: { name: 'Discipline', value: 6 },
                    INT: { name: 'Intellect', value: 9 },
                    CHA: { name: 'Charisma', value: 6, dynamic: true }
                }
            };
            gigData = [
                 { id: 'gig-01', title: "The Fighter's Cadence", priority: 'A', category: 'Main Job (NS)', objectives: [ { text: 'Perfect Attendance: Complete all 5 scheduled training sessions.', done: false }, { text: 'Punctuality Protocol: Arrive on time for every session.', done: false }, ], payout: { sp: 5, exp: 500 }, completed: false },
                 { id: 'gig-02', title: "Foundational Forge: Marja's Combinations", priority: 'A', category: 'Main Job (NS)', timeLimit: 'By Monday, June 9th, 10:00 AM CDT', objectives: [ { text: 'Complete Phase I: Mobility Activation & Dynamic Warm-up', done: false }, { text: 'Complete Phase II: The Art of the Teep & The Roundhouse', done: false }, { text: 'Complete Phase III: Marja\'s Combinations', done: false }, { text: 'Complete Phase IV: Cool Down & Foundational Flexibility', done: false }, { text: 'Bonus: Record & review footage from Round 5', done: false }, ], payout: { sp: 7, exp: 400 }, completed: false },
                 { id: 'gig-03', title: "Work Grind: Monday Night Shift", priority: 'C', category: 'Side Hustle (E)', objectives: [ { text: 'Arrive on time for 5:00 PM - 10:00 PM shift.', done: false }, { text: 'Complete all assigned duties.', done: false }, { text: 'Bonus: Resist impulse purchases.', done: false }, ], payout: { sp: 2, exp: 75 }, completed: false },
                 { id: 'gig-04', title: 'The Anane Protocol: Phase 1', priority: 'A', category: 'Main Job (NS)', timeLimit: '7 Days', objectives: [ { text: '10-min dynamic stretching pre-training daily.', done: false }, { text: '15-min static stretching post-training daily.', done: false }, { text: 'Drill 50 teeps on heavy bag (3 sessions).', done: false }, { text: 'Drill 50 roundhouse kicks on heavy bag.', done: false }, { text: 'Watch one Nabil Anane fight and take notes.', done: false }, ], payout: { sp: 7, exp: 400 }, completed: false },
                 { id: 'gig-05', title: "Work Grind: Friday Night Shift", priority: 'C', category: 'Side Hustle (E)', objectives: [ { text: 'Arrive on time for 5:00 PM - 10:00 PM shift.', done: false }, { text: 'Complete all assigned duties.', done: false }, { text: 'Bonus: Resist impulse purchases.', done: false }, ], payout: { sp: 2, exp: 75 }, completed: false },
                 { id: 'gig-06', title: "Work Grind: Sunday Evening Shift", priority: 'C', category: 'Side Hustle (E)', objectives: [ { text: 'Arrive on time for 3:00 PM - 10:00 PM shift.', done: false }, { text: 'Complete all assigned duties.', done: false }, { text: 'Bonus: Resist impulse purchases.', done: false }, ], payout: { sp: 2, exp: 100 }, completed: false }
            ];

            renderStats();
            renderGigs();
            logSystemMessage("Authentication successful. System online.");
            logSystemMessage("Baseline Build v1.0 'The Resonant Mind' loaded.");
        }

        function renderStats() {
            coreStatsContainer.innerHTML = '';
            for (const key in playerData.stats) {
                const stat = playerData.stats[key];
                const statHTML = `<div class="flex items-center justify-between"><span class="font-semibold text-white">${stat.name} (${key})</span><span class="font-bold text-lg text-cyan-400 ${stat.dynamic ? 'neon-glow-cyan' : ''} px-2 rounded">${stat.value}</span></div>`;
                coreStatsContainer.innerHTML += statHTML;
            }
        }
        function renderGigs() {
            gigBoardContainer.innerHTML = '';
            gigData.forEach(gig => {
                if (gig.completed) return;
                const objectivesHTML = gig.objectives.map((obj, index) => `<label for="${gig.id}-obj-${index}" class="flex items-center space-x-3 cursor-pointer group"><input type="checkbox" id="${gig.id}-obj-${index}" data-gig-id="${gig.id}" data-obj-index="${index}" class="form-checkbox h-5 w-5 bg-gray-700 border-gray-600 text-cyan-500 rounded focus:ring-cyan-600 focus:ring-offset-gray-800"><span class="text-gray-300 group-hover:text-white transition-colors">${obj.text}</span></label>`).join('');
                const gigHTML = `<div id="${gig.id}" class="bg-gray-900/50 p-5 rounded-lg border border-gray-700"><div class="flex flex-col sm:flex-row justify-between sm:items-start mb-3"><div><h3 class="text-lg font-bold text-white">${gig.title}</h3><div class="flex flex-wrap items-center gap-x-3 gap-y-1 text-xs text-gray-400 mt-1"><span>Category: <span class="font-semibold text-cyan-400">${gig.category}</span></span>${gig.timeLimit ? `<span>Time Limit: <span class="font-semibold text-yellow-400">${gig.timeLimit}</span></span>` : ''}</div></div><span class="rank-tag rank-${gig.priority.toLowerCase()} mt-2 sm:mt-0 flex-shrink-0">${gig.priority}-Rank</span></div><div class="space-y-3 mb-4">${objectivesHTML}</div><div class="flex justify-between items-center border-t border-gray-700 pt-3"><span class="text-sm text-gray-400">Payout: <span class="font-semibold text-green-400">${gig.payout.sp} SP, ${gig.payout.exp} EXP</span></span><button data-gig-id="${gig.id}" class="complete-gig-btn bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-1 px-3 text-sm rounded-md disabled:bg-gray-600 disabled:cursor-not-allowed transition-colors" disabled>Complete Gig</button></div></div>`;
                gigBoardContainer.innerHTML += gigHTML;
            });
            addGigEventListeners();
        }

        function logSystemMessage(message) {
            const logEntry = document.createElement('p');
            logEntry.innerHTML = `&gt; ${message}`;
            systemLog.appendChild(logEntry);
            systemLog.scrollTop = systemLog.scrollHeight;
        }

        function addGigEventListeners() { 
            document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => checkbox.addEventListener('change', (e) => {
                const gig = gigData.find(g => g.id === e.target.dataset.gigId);
                if (gig) { gig.objectives[parseInt(e.target.dataset.objIndex, 10)].done = e.target.checked; checkGigCompletion(e.target.dataset.gigId); }
            }));
            document.querySelectorAll('.complete-gig-btn').forEach(button => button.addEventListener('click', (e) => completeGig(e.target.dataset.gigId)));
        }

        function checkGigCompletion(gigId) {
             const gig = gigData.find(g => g.id === gigId);
            if (!gig) return;
            const allDone = gig.objectives.every(obj => obj.done);
            const completeButton = document.querySelector(`#${gigId} .complete-gig-btn`);
            if (completeButton) {
                if (allDone) {
                    completeButton.disabled = false;
                    logSystemMessage(`All objectives for <span class="text-yellow-400">${gig.title}</span> met. Awaiting confirmation.`);
                } else { completeButton.disabled = true; }
            }
        }

        function completeGig(gigId) {
            currentCompletingGig = gigData.find(g => g.id === gigId);
            if (!currentCompletingGig) return;
            currentCompletingGig.completed = true;
            const gigElement = document.getElementById(gigId);
            if (gigElement) {
                gigElement.classList.add('transition-opacity', 'duration-500', 'opacity-0');
                setTimeout(() => gigElement.remove(), 500);
            }
            playerData.exp += currentCompletingGig.payout.exp;
            document.getElementById('exp-bar').style.width = `${(playerData.exp / playerData.expToNextLevel) * 100}%`;
            document.getElementById('current-exp').textContent = playerData.exp;
            logSystemMessage(`Gig <span class="text-yellow-400">${currentCompletingGig.title}</span> complete. Payout awarded: <span class="text-green-400">${currentCompletingGig.payout.exp} EXP, ${currentCompletingGig.payout.sp} SP</span>.`);
            openStatModal(currentCompletingGig.payout.sp);
        }

        function openStatModal(sp) {
            spEarnedEl.textContent = sp;
            spRemainingEl.textContent = sp;
            confirmAllocationBtn.disabled = true;
            statAllocationInputs.innerHTML = '';
            for (const key in playerData.stats) {
                statAllocationInputs.innerHTML += `<div class="grid grid-cols-3 items-center gap-4"><label for="stat-${key}" class="font-semibold col-span-1">${playerData.stats[key].name}</label><input type="number" id="stat-${key}" data-stat-key="${key}" min="0" value="0" class="col-span-2 form-input bg-gray-700 border-gray-600 text-white rounded w-full text-center focus:ring-cyan-500 focus:border-cyan-500"></div>`;
            }
            statModal.classList.remove('hidden');
            const inputs = statAllocationInputs.querySelectorAll('input');
            inputs.forEach(input => input.addEventListener('input', () => {
                let totalAllocated = 0;
                inputs.forEach(i => { totalAllocated += parseInt(i.value, 10) || 0; });
                const remaining = sp - totalAllocated;
                spRemainingEl.textContent = remaining;
                if (remaining < 0) { spRemainingEl.classList.add('text-red-500'); spRemainingEl.classList.remove('text-cyan-400'); confirmAllocationBtn.disabled = true; }
                else { spRemainingEl.classList.remove('text-red-500'); spRemainingEl.classList.add('text-cyan-400'); confirmAllocationBtn.disabled = remaining !== 0; }
            }));
        }

        confirmAllocationBtn.addEventListener('click', () => {
            const inputs = statAllocationInputs.querySelectorAll('input');
            let totalAllocated = 0;
            const allocations = {};
            inputs.forEach(input => {
                const value = parseInt(input.value, 10) || 0;
                if (value > 0) { allocations[input.dataset.statKey] = value; totalAllocated += value; }
            });
            if (totalAllocated === parseInt(spEarnedEl.textContent, 10)) {
                let logMessage = "Stat allocation confirmed. ";
                for (const key in allocations) {
                    playerData.stats[key].value += allocations[key];
                    logMessage += `+${allocations[key]} <span class="text-cyan-400">${key}</span>. `;
                }
                logSystemMessage(logMessage);
                renderStats();
                statModal.classList.add('hidden');
                currentCompletingGig = null;
            }
        });
    });
    </script>
</body>
</html>
