<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project: Ascendant - Live Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap" rel="stylesheet">
    <style>
        /* Custom styles to complement Tailwind and match the 'Fixer' aesthetic */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #111827; /* Tailwind gray-900 */
        }
        /* Custom scrollbar for a more integrated look */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #1f2937; /* gray-800 */
        }
        ::-webkit-scrollbar-thumb {
            background: #4b5563; /* gray-600 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #6b7280; /* gray-500 */
        }
        /* Custom class for the neon glow effect */
        .neon-glow-cyan {
            box-shadow: 0 0 5px rgba(6, 182, 212, 0.7), 0 0 10px rgba(6, 182, 212, 0.5), 0 0 15px rgba(6, 182, 212, 0.3);
        }
        /* Style for the rank tags */
        .rank-tag {
            font-weight: 900;
            padding: 2px 8px;
            border-radius: 9999px;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        .rank-s { background-color: #ef4444; color: white; } /* red-500 */
        .rank-a { background-color: #f97316; color: white; } /* orange-500 */
        .rank-b { background-color: #eab308; color: white; } /* yellow-500 */
        .rank-c { background-color: #22c55e; color: white; } /* green-500 */
        .rank-d { background-color: #3b82f6; color: white; } /* blue-500 */
        .rank-e { background-color: #6b7280; color: white; } /* gray-500 */

        /* Modal styles */
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.75);
            z-index: 40;
        }
        .modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 50;
        }
    </style>
</head>
<body class="text-gray-200">

    <!-- Main Container -->
    <div class="min-h-screen p-4 sm:p-6 lg:p-8">
        <div class="max-w-7xl mx-auto">

            <!-- Header -->
            <header class="mb-8">
                <h1 class="text-2xl sm:text-3xl font-bold text-white tracking-wide">PROJECT: ASCENDANT</h1>
                <p class="text-cyan-400">Jackie-TheGem v1.058 - Live System Interface</p>
            </header>

            <!-- Main Dashboard Layout -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8">

                <!-- Left Column: Player Stats & Confidants -->
                <aside class="lg:col-span-1 space-y-6 lg:space-y-8">
                    
                    <!-- Player Stats Panel -->
                    <div id="player-stats" class="bg-gray-800 p-6 rounded-lg shadow-lg">
                        <h2 class="text-xl font-bold text-white mb-4 border-b border-gray-700 pb-2">RYLEE - PLAYER STATS</h2>
                        <div class="space-y-4">
                            <!-- EXP Bar -->
                            <div>
                                <div class="flex justify-between items-baseline mb-1">
                                    <span class="font-semibold text-cyan-400">LEVEL 1</span>
                                    <span class="text-sm font-mono text-gray-400"><span id="current-exp">250</span> / <span id="max-exp">1000</span> EXP</span>
                                </div>
                                <div class="w-full bg-gray-700 rounded-full h-4">
                                    <div id="exp-bar" class="bg-cyan-500 h-4 rounded-full transition-all duration-500 ease-in-out" style="width: 25%;"></div>
                                </div>
                                <p class="text-xs text-center text-gray-500 mt-1">The Grindstone Curve</p>
                            </div>
                            <!-- Core Stats -->
                            <div id="core-stats-container" class="space-y-3 pt-4">
                                <!-- Stats will be dynamically inserted here -->
                            </div>
                        </div>
                    </div>

                    <!-- Confidants Panel -->
                    <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                        <h2 class="text-xl font-bold text-white mb-4 border-b border-gray-700 pb-2">CONFIDANTS</h2>
                        <div class="space-y-3">
                            <div class="flex items-center justify-between">
                                <span class="font-semibold">Savannah - Bond Confidant</span>
                                <span class="text-sm text-cyan-400 font-mono">Rank 5</span>
                            </div>
                             <div class="flex items-center justify-between">
                                <span class="font-semibold">Edgar - Training Confidant</span>
                                <span class="text-sm text-cyan-400 font-mono">Rank 6</span>
                            </div>
                             <div class="flex items-center justify-between">
                                <span class="font-semibold">Kru Somchai - Mentor Confidant</span>
                                <span class="text-sm text-cyan-400 font-mono">Rank 4</span>
                            </div>
                        </div>
                    </div>

                </aside>

                <!-- Right Column: Gig Board -->
                <main class="lg:col-span-2">
                    <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                        <h2 class="text-xl sm:text-2xl font-bold text-white mb-4">GIG BOARD</h2>
                        <div id="gig-board-container" class="space-y-6">
                            <!-- Gigs will be dynamically inserted here -->
                        </div>
                    </div>
                </main>
            </div>
            
            <!-- System Log -->
            <footer class="mt-8 bg-gray-800 p-4 rounded-lg shadow-lg">
                <h3 class="text-lg font-semibold text-cyan-400 mb-2">SYSTEM LOG</h3>
                <div id="system-log" class="text-sm text-gray-400 font-mono h-24 overflow-y-auto space-y-1">
                    <!-- Log entries will be added here -->
                </div>
            </footer>
        </div>
    </div>
    
    <!-- Modal for Stat Allocation -->
    <div id="stat-modal" class="hidden">
        <div class="modal-backdrop"></div>
        <div class="modal bg-gray-800 border border-cyan-500 rounded-lg shadow-2xl w-11/12 md:w-1/2 lg:w-1/3 p-6">
            <h2 class="text-2xl font-bold text-white mb-4">PAYOUT AWARDED</h2>
            <p class="mb-4">Gig complete. You've earned <span id="sp-earned" class="font-bold text-cyan-400"></span> Stat Points (SP). Allocate them to your Core Stats.</p>
            <div id="stat-allocation-inputs" class="space-y-4 mb-6">
                <!-- Allocation inputs will be generated here -->
            </div>
            <div class="flex justify-between items-center">
                <p>Points Remaining: <span id="sp-remaining" class="font-bold text-cyan-400"></span></p>
                <button id="confirm-allocation-btn" class="bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-2 px-4 rounded disabled:bg-gray-600 disabled:cursor-not-allowed">
                    Lock In
                </button>
            </div>
        </div>
    </div>


    <script>
        // --- DATA INITIALIZATION ---
        // Based on the LDCV and LDPH documents.
        let playerData = {
            level: 1,
            exp: 250,
            expToNextLevel: 1000,
            stats: {
                STR: { name: 'Strength', value: 5, description: "Governs physical power and impact." },
                END: { name: 'Endurance', value: 6, description: "Governs cardio, conditioning, and fatigue resistance." },
                DIS: { name: 'Discipline', value: 6, description: "Governs willpower, consistency, and resisting bad habits." },
                INT: { name: 'Intellect', value: 9, description: "Governs learning, strategy, and fight IQ." },
                CHA: { name: 'Charisma', value: 6, description: "Governs relationships and communication.", dynamic: true, buff: 7, debuff: 5 }
            }
        };

        const gigData = [
            {
                id: 'gig-01',
                title: "The Fighter's Cadence",
                priority: 'A',
                category: 'Main Job (NS)',
                type: 'Passive, Weekly',
                objectives: [
                    { text: 'Perfect Attendance: Complete all 5 scheduled training sessions.', done: false },
                    { text: 'Punctuality Protocol: Arrive on time for every session.', done: false },
                ],
                payout: { sp: 5, exp: 500, details: "3 DIS, 2 END" },
                completed: false,
            },
            {
                id: 'gig-02',
                title: "Foundational Forge: Marja's Combinations",
                priority: 'A',
                category: 'Main Job (NS)',
                timeLimit: 'Complete by Monday, June 9th, 10:00 AM CDT',
                objectives: [
                    { text: 'Complete Phase I: Mobility Activation & Dynamic Warm-up', done: false },
                    { text: 'Complete Phase II: The Art of the Teep & The Roundhouse', done: false },
                    { text: 'Complete Phase III: Marja\'s Combinations', done: false },
                    { text: 'Complete Phase IV: Cool Down & Foundational Flexibility', done: false },
                    { text: 'Bonus: Record & review footage from Round 5', done: false },
                ],
                payout: { sp: 7, exp: 400, details: "1 STR, 2 END, 2 DIS, 2 INT" },
                completed: false,
            },
            {
                id: 'gig-03',
                title: "Work Grind: Monday Night Shift",
                priority: 'C',
                category: 'Side Hustle (E)',
                objectives: [
                    { text: 'Arrive on time for 5:00 PM - 10:00 PM shift.', done: false },
                    { text: 'Complete all assigned duties.', done: false },
                    { text: 'Bonus: Resist impulse purchases.', done: false },
                ],
                payout: { sp: 2, exp: 75, details: "1 DIS, 1 CHA (+1 DIS Bonus)" },
                completed: false,
            },
            {
                id: 'gig-04',
                title: 'The Anane Protocol: Phase 1',
                priority: 'A',
                category: 'Main Job (NS)',
                timeLimit: '7 Days',
                objectives: [
                   { text: '10-min dynamic stretching pre-training daily.', done: false },
                   { text: '15-min static stretching post-training daily.', done: false },
                   { text: 'Drill 50 teeps on heavy bag (3 sessions).', done: false },
                   { text: 'Drill 50 roundhouse kicks on heavy bag.', done: false },
                   { text: 'Watch one Nabil Anane fight and take notes.', done: false },
                ],
                payout: { sp: 7, exp: 400, details: '3 DIS, 2 END, 2 INT' },
                completed: false
            }
        ];

        // --- DOM ELEMENTS ---
        const coreStatsContainer = document.getElementById('core-stats-container');
        const gigBoardContainer = document.getElementById('gig-board-container');
        const systemLog = document.getElementById('system-log');
        const currentExpEl = document.getElementById('current-exp');
        const expBar = document.getElementById('exp-bar');
        const statModal = document.getElementById('stat-modal');
        const statAllocationInputs = document.getElementById('stat-allocation-inputs');
        const spEarnedEl = document.getElementById('sp-earned');
        const spRemainingEl = document.getElementById('sp-remaining');
        const confirmAllocationBtn = document.getElementById('confirm-allocation-btn');
        let currentCompletingGig = null;


        // --- RENDERING FUNCTIONS ---
        function renderStats() {
            coreStatsContainer.innerHTML = ''; // Clear previous stats
            for (const key in playerData.stats) {
                const stat = playerData.stats[key];
                const isDynamic = stat.dynamic;
                const dynamicClass = isDynamic ? 'neon-glow-cyan' : '';
                
                const statHTML = `
                    <div class="flex items-center justify-between">
                        <span class="font-semibold text-white">${stat.name} (${key})</span>
                        <span class="font-bold text-lg text-cyan-400 ${dynamicClass} px-2 rounded">${stat.value}</span>
                    </div>
                `;
                coreStatsContainer.innerHTML += statHTML;
            }
        }

        function renderGigs() {
            gigBoardContainer.innerHTML = ''; // Clear previous gigs
            gigData.forEach(gig => {
                if (gig.completed) return; // Don't render completed gigs

                const objectivesHTML = gig.objectives.map((obj, index) => `
                    <label for="${gig.id}-obj-${index}" class="flex items-center space-x-3 cursor-pointer group">
                        <input type="checkbox" id="${gig.id}-obj-${index}" data-gig-id="${gig.id}" data-obj-index="${index}" class="form-checkbox h-5 w-5 bg-gray-700 border-gray-600 text-cyan-500 rounded focus:ring-cyan-600 focus:ring-offset-gray-800">
                        <span class="text-gray-300 group-hover:text-white transition-colors">${obj.text}</span>
                    </label>
                `).join('');

                const gigHTML = `
                    <div id="${gig.id}" class="bg-gray-900/50 p-5 rounded-lg border border-gray-700">
                        <div class="flex flex-col sm:flex-row justify-between sm:items-start mb-3">
                            <div>
                                <h3 class="text-lg font-bold text-white">${gig.title}</h3>
                                <div class="flex flex-wrap items-center gap-x-3 gap-y-1 text-xs text-gray-400 mt-1">
                                    <span>Category: <span class="font-semibold text-cyan-400">${gig.category}</span></span>
                                    ${gig.timeLimit ? `<span>Time Limit: <span class="font-semibold text-yellow-400">${gig.timeLimit}</span></span>` : ''}
                                </div>
                            </div>
                            <span class="rank-tag rank-${gig.priority.toLowerCase()} mt-2 sm:mt-0 flex-shrink-0">${gig.priority}-Rank</span>
                        </div>
                        <div class="space-y-3 mb-4">
                            ${objectivesHTML}
                        </div>
                        <div class="flex justify-between items-center border-t border-gray-700 pt-3">
                             <span class="text-sm text-gray-400">Payout: <span class="font-semibold text-green-400">${gig.payout.sp} SP, ${gig.payout.exp} EXP</span></span>
                             <button data-gig-id="${gig.id}" class="complete-gig-btn bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-1 px-3 text-sm rounded-md disabled:bg-gray-600 disabled:cursor-not-allowed transition-colors" disabled>Complete Gig</button>
                        </div>
                    </div>
                `;
                gigBoardContainer.innerHTML += gigHTML;
            });

            // Add event listeners after rendering
            addGigEventListeners();
        }

        function updateExpBar() {
            const percentage = (playerData.exp / playerData.expToNextLevel) * 100;
            expBar.style.width = `${percentage}%`;
            currentExpEl.textContent = playerData.exp;
        }

        // --- LOGIC & EVENT HANDLING ---
        function logSystemMessage(message) {
            const logEntry = document.createElement('p');
            logEntry.innerHTML = `&gt; ${message}`;
            systemLog.appendChild(logEntry);
            systemLog.scrollTop = systemLog.scrollHeight; // Auto-scroll to bottom
        }
        
        function addGigEventListeners() {
            // Objective checkbox listeners
            document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                checkbox.addEventListener('change', (e) => {
                    const gigId = e.target.dataset.gigId;
                    const objIndex = parseInt(e.target.dataset.objIndex, 10);
                    
                    const gig = gigData.find(g => g.id === gigId);
                    if (gig) {
                        gig.objectives[objIndex].done = e.target.checked;
                        checkGigCompletion(gigId);
                    }
                });
            });

            // Complete Gig button listeners
            document.querySelectorAll('.complete-gig-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const gigId = e.target.dataset.gigId;
                    completeGig(gigId);
                });
            });
        }

        function checkGigCompletion(gigId) {
            const gig = gigData.find(g => g.id === gigId);
            if (!gig) return;

            const allDone = gig.objectives.every(obj => obj.done);
            const completeButton = document.querySelector(`#${gigId} .complete-gig-btn`);
            
            if (completeButton) {
                if (allDone) {
                    completeButton.disabled = false;
                    logSystemMessage(`All objectives for <span class="text-yellow-400">${gig.title}</span> met. Awaiting confirmation.`);
                } else {
                    completeButton.disabled = true;
                }
            }
        }
        
        function completeGig(gigId) {
            currentCompletingGig = gigData.find(g => g.id === gigId);
            if (!currentCompletingGig) return;

            // Mark gig as completed and remove from UI
            currentCompletingGig.completed = true;
            const gigElement = document.getElementById(gigId);
            if(gigElement) {
                gigElement.classList.add('transition-opacity', 'duration-500', 'opacity-0');
                setTimeout(() => gigElement.remove(), 500);
            }

            // Award EXP
            playerData.exp += currentCompletingGig.payout.exp;
            updateExpBar();
            
            logSystemMessage(`Gig <span class="text-yellow-400">${currentCompletingGig.title}</span> complete. Payout awarded: <span class="text-green-400">${currentCompletingGig.payout.exp} EXP, ${currentCompletingGig.payout.sp} SP</span>.`);

            // Open stat allocation modal
            openStatModal(currentCompletingGig.payout.sp);
        }
        
        function openStatModal(sp) {
            spEarnedEl.textContent = sp;
            spRemainingEl.textContent = sp;
            confirmAllocationBtn.disabled = true;
            
            statAllocationInputs.innerHTML = '';
            for (const key in playerData.stats) {
                const stat = playerData.stats[key];
                const inputHTML = `
                    <div class="grid grid-cols-3 items-center gap-4">
                        <label for="stat-${key}" class="font-semibold col-span-1">${stat.name}</label>
                        <input type="number" id="stat-${key}" data-stat-key="${key}" min="0" value="0" class="col-span-2 form-input bg-gray-700 border-gray-600 text-white rounded w-full text-center focus:ring-cyan-500 focus:border-cyan-500">
                    </div>
                `;
                statAllocationInputs.innerHTML += inputHTML;
            }
            
            statModal.classList.remove('hidden');

            // Add listeners for the modal inputs
            const inputs = statAllocationInputs.querySelectorAll('input');
            inputs.forEach(input => {
                input.addEventListener('input', () => {
                    let totalAllocated = 0;
                    inputs.forEach(i => {
                        totalAllocated += parseInt(i.value, 10) || 0;
                    });
                    const remaining = sp - totalAllocated;
                    spRemainingEl.textContent = remaining;

                    if (remaining < 0) {
                        spRemainingEl.classList.add('text-red-500');
                        spRemainingEl.classList.remove('text-cyan-400');
                        confirmAllocationBtn.disabled = true;
                    } else {
                        spRemainingEl.classList.remove('text-red-500');
                        spRemainingEl.classList.add('text-cyan-400');
                        confirmAllocationBtn.disabled = remaining !== 0;
                    }
                });
            });
        }
        
        confirmAllocationBtn.addEventListener('click', () => {
            const inputs = statAllocationInputs.querySelectorAll('input');
            let totalAllocated = 0;
            const allocations = {};

            inputs.forEach(input => {
                const value = parseInt(input.value, 10) || 0;
                const key = input.dataset.statKey;
                if(value > 0) {
                    allocations[key] = value;
                    totalAllocated += value;
                }
            });

            if (totalAllocated === parseInt(spEarnedEl.textContent, 10)) {
                let logMessage = "Stat allocation confirmed. ";
                for(const key in allocations) {
                    playerData.stats[key].value += allocations[key];
                    logMessage += `+${allocations[key]} <span class="text-cyan-400">${key}</span>. `;
                }
                
                logSystemMessage(logMessage);
                renderStats();
                statModal.classList.add('hidden');
                currentCompletingGig = null;
            }
        });


        // --- INITIALIZATION ---
        function initializeDashboard() {
            renderStats();
            renderGigs();
            logSystemMessage("Project: Ascendant interface online. Awaiting user input.");
            logSystemMessage("Baseline Build v1.0 'The Resonant Mind' loaded.");
        }

        // Start the application on window load
        window.onload = initializeDashboard;
    </script>
</body>
</html>
